{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"@redux-devtools/extension\";\nimport thunk from \"redux-thunk\";\nconst composeEnhancers = composeWithDevTools({\n  name: \"Github\"\n});\n\nconst reposotoriesReduser = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"LOAD_REPOSITORIES\") {\n    return state.concat(action.payload);\n  } else {\n    return state;\n  }\n};\n\nexport const createApplicationStore = () => createStore(combineReducers({\n  reposotoriesReduser\n}), composeEnhancers(applyMiddleware(thunk)));","map":{"version":3,"sources":["C:/Users/HP/Desktop/MyProject/my-app/src/Redux/ReduxStore.js"],"names":["createStore","combineReducers","applyMiddleware","composeWithDevTools","thunk","composeEnhancers","name","reposotoriesReduser","state","action","type","concat","payload","createApplicationStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,gBAAgB,GAAGF,mBAAmB,CAAC;AAC3CG,EAAAA,IAAI,EAAE;AADqC,CAAD,CAA5C;;AAIA,MAAMC,mBAAmB,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAClD,MAAIA,MAAM,CAACC,IAAP,KAAgB,mBAApB,EAAyC;AACvC,WAAOF,KAAK,CAACG,MAAN,CAAaF,MAAM,CAACG,OAApB,CAAP;AACD,GAFD,MAEO;AACL,WAAOJ,KAAP;AACD;AACF,CAND;;AAQA,OAAO,MAAMK,sBAAsB,GAAG,MACpCb,WAAW,CACTC,eAAe,CAAC;AAAEM,EAAAA;AAAF,CAAD,CADN,EAETF,gBAAgB,CAACH,eAAe,CAACE,KAAD,CAAhB,CAFP,CADN","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"@redux-devtools/extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst composeEnhancers = composeWithDevTools({\r\n  name: \"Github\",\r\n});\r\n\r\nconst reposotoriesReduser = (state = [], action) => {\r\n  if (action.type === \"LOAD_REPOSITORIES\") {\r\n    return state.concat(action.payload);\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const createApplicationStore = () =>\r\n  createStore(\r\n    combineReducers({ reposotoriesReduser }),\r\n    composeEnhancers(applyMiddleware(thunk))\r\n  );\r\n"]},"metadata":{},"sourceType":"module"}